version: 2.1
orbs:
  slack: circleci/slack@4.10.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            ls -la && npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            ls -la && npm install
            npm run build
      - slack/notify:
          channel: general
          event: fail
          mentions: '@minhhc'
          template: basic_fail_1
      - slack/notify:
          channel: general
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-test]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-scan]
      - run:
         name: scan-frontend
         command: |
          cd frontend
          npm install
          npm install oauth-sign@^0.9.0
          npm audit fix --audit-level=critical
          npm audit fix --force
          npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [backend-scan]
      - run:
         name: scan-backend
         command: |
          cd backend
          npm install
          npm audit fix --audit-level=critical
          npm audit fix --force
          npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  configure-infrastructure:
    docker: 
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:ac:81:ea:94:25:9b:f2:83:c0:67:9c:0b:7a:72:c5:a6:be:db:8f"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            pwd
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt configure-server.yml
      #- destroy_environment:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}
      #    when: on_fail
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run database migration
          command: |
            cd backend
            npm install
            npm run migrations > migrations_log.txt
            cat migrations_log.txt
    #  - run:
    #      name: Send database migration status to memstash
    #      command: |
    #        if grep "has been executed successfully" ./backend/migrations_log.txt;
    #        then
    #          echo "Database migration has been executed successfully"
    #          curl -H "Content-Type: text/plain" -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
    #        else
    #          echo "Database migration has failed, verify DB setup!"
    #          curl -H "Content-Type: text/plain" -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
    #        fi
      #- destroy-environment:
      #    workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #   requires: [build-frontend]
      #- test-backend:
      #   filters:
      #      tags:
      #        only: /^v.*/
      #   requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- scan-backend:
      #    requires: [build-backend]
      #- slack/on-hold:
      #    context: slack-secrets
      #    filters:
      #      tags:
      #        only: /^v.*/
      #    requires:
      #      - test-backend
      #- pause_workflow:
      #    filters:
       #     tags:
        #      only: /^v.*/
         # requires:
          #  - test-backend
           # - slack/on-hold
          #type: approval
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]