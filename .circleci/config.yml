version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy frontend & backend stack
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -k https://kvdb.io/4bkXvYSkimAiAPH5oL6hx3/migration_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>
jobs:
  build-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            ls -la && npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            ls -la && npm install
            npm run build
      - slack/notify:
          channel: general
          event: fail
          mentions: '@minhhc'
          template: basic_fail_1
      - slack/notify:
          channel: general
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-test]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-scan]
      - run:
         name: scan-frontend
         command: |
          cd frontend
          npm install
          npm install oauth-sign@^0.9.0
          npm audit fix --audit-level=critical
          npm audit fix --force
          npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
         keys: [backend-scan]
      - run:
         name: scan-backend
         command: |
          cd backend
          npm install
          npm audit fix --audit-level=critical
          npm audit fix --force
          npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - attach_workspace:
          at: .
      - run:
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci
            echo "[web]" > ansible/inventory.txt
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["66:be:9c:93:c1:34:f6:76:87:93:49:36:54:e3:68:47:16:3f:b5:f6"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml --extra-vars "_TYPEORM_CONNECTION=$TYPEORM_CONNECTION _TYPEORM_ENTITIES=$TYPEORM_ENTITIES _TYPEORM_HOST=$TYPEORM_HOST _TYPEORM_PORT=$TYPEORM_PORT _TYPEORM_USERNAME=$TYPEORM_USERNAME _TYPEORM_PASSWORD=$TYPEORM_PASSWORD _TYPEORM_DATABASE=$TYPEORM_DATABASE _TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS _TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR"
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
    docker:
      # Docker image that supports NodeJS
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt update
            sudo apt install awscli -y
      - run:
          name: Run database migration
          command: |
            cd ./backend
            pwd
            npm install
            npm run migrations > migrations_log.txt
            cat ./migrations_log.txt
      - run:
            name: Send migration results to kvdb
            working_directory: ./backend
            command: |
              if grep -q "has been executed successfully" migration_status
              then
                echo "DB migration was successful, will update kvdb..."
                curl -k https://kvdb.io/4bkXvYSkimAiAPH5oL6hx3/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'successfully migrate'
              else
                echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
                curl -k https://kvdb.io/4bkXvYSkimAiAPH5oL6hx3/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'fail migrate'
              fi
              echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-frontend:
    docker:
      # Docker image that supports NodeJS
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt update
            sudo apt install awscli -y
      - attach_workspace:
          at: .
      - run:
          name: Get backend API Url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build and Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  deploy-backend:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - add_ssh_keys:
          fingerprints: ["66:be:9c:93:c1:34:f6:76:87:93:49:36:54:e3:68:47:16:3f:b5:f6"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  smoke-test:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 1
            else
                exit 1
            fi
      #- destroy_environment:
      #    workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert_migrations:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}
      #    when: on_fail
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend